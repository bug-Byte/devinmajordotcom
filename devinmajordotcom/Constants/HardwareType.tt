  <#@ template hostspecific="true" language="C#" debug="false"  #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>

<#
	string ConnectionStringName = "MainDbConnection";
	string Query = "SELECT ID, Name FROM [Security].[HardwareType] ORDER BY ID;";

    var map = new ExeConfigurationFileMap();
    map.ExeConfigFilename = this.Host.ResolvePath(@"..\Web.config");
	
    var config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
    var connectionString = config.ConnectionStrings.ConnectionStrings[ConnectionStringName].ConnectionString;
#>
<#@ output extension=".cs" #>
/*
	This File is generated by the CategoryMaster.tt file written by mdoherty
	It is used to keep our Categories synchronized with the database
	If you add another Category save this template so we have up to date values
	
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;

namespace devinmajordotcom
{
    /// <summary>
    /// We need the ability to check for new HardwareTypes
    /// </summary>
	public static class HardwareTypeEnum
	{
<#
using(SqlConnection conn = new SqlConnection())
{
	conn.ConnectionString = connectionString;
	conn.Open();

	// use the connection here
	SqlCommand command = new SqlCommand(Query, conn);

	using (SqlDataReader reader = command.ExecuteReader())
	{
#>

		public enum HardwareTypes
		{
<#


		while (reader.Read())
        {
			int ID = (int)reader[0];
			string name = (string)reader[1];
#>
			[Display(Name="<#= name.Trim() #>")]
			<#= name.Trim().Replace(" ", "").Replace("/", "").Replace("&", "").Replace("-", "").Replace("@", "")   #> = <#= ID #>,
<#
		}
	}
	conn.Close();
}
#>
		}
	}
}