@model devinmajordotcom.ViewModels.PortfolioViewModel

<div class="panel panel-default" style="margin-bottom: 1vh; -webkit-box-shadow: 2.5px 2.5px 5px 2.5px rgba(245,245,245,1);
                                      -moz-box-shadow: 2.5px 2.5px 5px 2.5px rgba(245,245,245,1);
                                      box-shadow: 2.5px 2.5px 5px 2.5px rgba(245,245,245,1);">
    <div class="panel-heading portfolioPanelHeading" data-toggle="collapse" href="#collapse3">
        <span class="glyphicon glyphicon-collapse-up glyphicon-collapse-down"></span>
        &nbsp;&nbsp;
        <h4 class="panel-title" style="display: inline;">
            <a>Skills</a>
        </h4>
    </div>
    <div id="collapse3" class="panel-collapse collapse">
        <div class="panel-body">

            <div class="row">
                <div class="col-sm-12 text-center">
                    <h3>Highlighted Skills</h3>
                </div>
            </div>

            <div id="skillCarousel" class="carousel">
                <!-- Indicators -->
                <ol class="carousel-indicators" style="bottom: -10px;">
                    @{
                        var counter = 0;
                        if (Model.HighlightedWorkSkills != null)
                        {
                            foreach (var workItem in Model.HighlightedWorkSkills)
                            {
                                var className = "";
                                if(counter == 0)
                                {
                                    className = "active";
                                }
                                <li data-target="#myCarousel" id="indicator_@counter" data-slide-to="@counter" class="@className"></li>
                                counter++;
                            }
                        }
                    }
                </ol>

                <!-- Wrapper for slides -->
                <div class="carousel-inner" id="workSkillList" style="width: 80%;left: 10%;">
                    @{

                        var count = 1;
                        if (Model.HighlightedWorkSkills != null)
                        {
                            foreach (var workItem in Model.HighlightedWorkSkills)
                            {
                                var active = "";
                                if (count == 1)
                                {
                                    active = "active";
                                }
                                var realCount = count - 1;
                                @Html.HiddenFor(x => x.HighlightedWorkSkills[realCount].WorkSkillID, new { @class = "hiddenWorkSkillID" })
                                <div class="item workSkill_@realCount @active">
                                    <div class="specialWork-wrapper" style="margin-bottom: -21px;">
                                        @*<i class="@workItem.SkillIcon"></i>*@
                                        <button data-placement="left"
                                                class="btn btn-default iconpicker"
                                                name="@Html.NameFor(x => x.HighlightedWorkSkills[realCount].SkillIcon)"
                                                role="iconpicker"
                                                data-iconset="fontawesome"
                                                data-icon="@Model.HighlightedWorkSkills[realCount].SkillIcon"
                                                type="button"
                                                style="font-size: 50px; margin-bottom: 1vh;"></button>
                                        @Html.TextBoxFor(x => x.HighlightedWorkSkills[realCount].SkillTitle, new {@class = "form-control text-center text-uppercase tm-work-h3", @style = "color:white !important;", @placeholder = "Skill Title (Ex: Paleontology)"})
                                        <hr>
                                        @Html.TextAreaFor(x => x.HighlightedWorkSkills[realCount].SkillDetails, new {@class = "form-control tinymce", @rows = "4", @placeholder = "Skill Description (Ex: I dig up bones and recreate skeletons of ancient, extinct animal species)"})
                                        <br />
                                        <div class="row">
                                            <div class="col-sm-12 text-center">
                                                @{
                                                    var linkText = "<span class='fa fa-trash' style='font-size:14px !important;padding-bottom:0px;'></span>&nbsp;Remove Skill";
                                                    var actionLink = Ajax.ActionLink("REPLACE", "RemoveHighlightedSkill", "Portfolio", new { ID = Model.HighlightedWorkSkills[realCount].WorkSkillID }, new AjaxOptions() { HttpMethod = "GET", OnSuccess = "RemoveSkill('.workSkill_" + realCount + "', 'workSkill')", OnFailure = "ManagePortfolioSkillsAjaxFailure" }, new { data_content = linkText, @id = "deleteWorkSkillLink_" + Model.TechSkills[realCount].TechSkillID, @class = "btn btn-danger deleteSkillGroup deleteSkillLink" });
                                                    @Html.Raw(actionLink.ToHtmlString().Replace("REPLACE", linkText))
                                                }
                                            </div>
                                            <div class="col-md-12">
                                                @Html.ValidationMessageFor(x => x.HighlightedWorkSkills[realCount].SkillIcon)
                                                @Html.ValidationMessageFor(x => x.HighlightedWorkSkills[realCount].SkillTitle)
                                                @Html.ValidationMessageFor(x => x.HighlightedWorkSkills[realCount].SkillDetails)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                count = count + 1;
                            }
                        }

                    }
                </div>

                <!-- Left and right controls -->
                <a class="left carousel-control" href="#skillCarousel" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#skillCarousel" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
                    
            <br/>

            <div class="row">
                <div class="col-sm-12 text-center">
                    <button type="button" id="addNewWorkSkillLink" class="btn btn-success" style="border-color: #00bc8c !important; background-color: #00bc8c !important;"><span class="glyphicon glyphicon-plus"></span>&nbsp;Add New Highlighted Work Skill</button>
                </div>
            </div>

            <br />
                
            <div class="row">
                <div class="col-sm-12 text-center">
                    <h3>Technical Skills</h3>
                </div>
            </div>

            @{
                count = 0;
            }

            <div id="techSkillContainer" style="overflow:auto !important;" class="">
                <ul id="techSkillsList" class="mediaSortable">
                    @foreach (var link in Model.TechSkills)
                    {
                        @Html.HiddenFor(x => x.TechSkills[count].TechSkillID, new { @class = "hiddenTechSkillID hiddenInput_" + Model.TechSkills[count].TechSkillID })
                        <li class="techSkill techSkill_@count handlebarsItem" style="padding-top: 10px; margin-bottom: 2vh;">
                            <div class="row">
                                <div class="col-sm-12 text-left">
                                    @Html.TextAreaFor(x => x.TechSkills[count].SkillDescription, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-12 text-right">
                                    @{
                                        var linkText = "<span class='fa fa-trash'></span>&nbsp;Remove Skill";
                                        var actionLink = Ajax.ActionLink("REPLACE", "RemoveTechSkill", "Portfolio", new { ID = Model.TechSkills[count].TechSkillID }, new AjaxOptions() { HttpMethod = "GET", OnSuccess = "RemoveSkill('.techSkill_" + count + "', 'techSkill')", OnFailure = "ManagePortfolioSkillsAjaxFailure" }, new { data_content = linkText, @id = "deleteLangugeSkillLink_" + Model.TechSkills[count].TechSkillID, @class = "btn btn-danger deleteSkillGroup deleteSkillLink", @style = "float:right;" });
                                        @Html.Raw(actionLink.ToHtmlString().Replace("REPLACE", linkText))
                                    }
                                </div>
                            </div>
                        </li>
                        count++;
                    }
                </ul>
            </div>
                    
            <div class="row">
                <div class="col-sm-12 text-center">
                    <button type="button" id="addNewTechSkillLink" class="btn btn-success" style="border-color: #00bc8c !important; background-color: #00bc8c !important;"><span class="glyphicon glyphicon-plus"></span>&nbsp;Add New Technical Skill</button>
                </div>
            </div>

            <br/>

            <div class="row">
                <div class="col-sm-12 text-center">
                    <h3>Language Skills</h3>
                </div>
            </div>

            <div id="languageSkillContainer">
                @if (Model.LanguageSkills != null && Model.LanguageSkills.Count > 0)
                {
                    for (var i = 0; i < Model.LanguageSkills.Count; i++)
                    {
                        @Html.HiddenFor(x => x.LanguageSkills[i].LanguageSkillID, new { @class = "language hiddenSkillId", data_skillid = Model.LanguageSkills[i].LanguageSkillID })
                        <div style="margin-left:0px;margin-bottom:20px;" class="languageSkill languageSkill_@i">
                            <div class="well well-sm text-left">
                                <h5>Language Name</h5>
                                @Html.TextBoxFor(x => x.LanguageSkills[i].LanguageName, new { @class = "form-control" })
                                <h5>Language Specifics (if programming language or applicable)</h5>
                                @Html.TextAreaFor(x => x.LanguageSkills[i].LanguageSpecifics, new { @class = "form-control" })
                                <h5>Language Capability (if programming language or applicable)</h5>
                                @Html.TextBoxFor(x => x.LanguageSkills[i].LanguageCapabilityPercentage, new { @class = "customSlider untouched", @data_slider_min = "0", data_slider_max = "100", data_slider_step = "1", data_slider_value = Model.LanguageSkills[i].LanguageCapabilityPercentage.ToString() })
                                @{
                                    var linkText = "<span class='fa fa-trash'></span>&nbsp;Remove Language";
                                    var actionLink = Ajax.ActionLink("REPLACE", "RemoveLanguageSkill", "Portfolio", new { ID = Model.LanguageSkills[i].LanguageSkillID }, new AjaxOptions() { HttpMethod = "GET", OnSuccess = "RemoveSkill('.languageSkill_" + i + "', 'languageSkill')", OnFailure = "ManagePortfolioSkillsAjaxFailure" }, new { data_content = linkText, @id = "deleteLangugeSkillLink_" + Model.LanguageSkills[i].LanguageSkillID, @class = "btn btn-danger deleteSkillGroup deleteSkillLink", @style = "float:right;" });
                                    @Html.Raw(actionLink.ToHtmlString().Replace("REPLACE", linkText))
                                }
                                <br/>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="row">
                <div class="col-sm-12 text-center">
                    <button type="button" id="addNewLanguageSkillLink" class="btn btn-success" style="border-color: #00bc8c !important; background-color: #00bc8c !important;"><span class="glyphicon glyphicon-plus"></span>&nbsp;Add New Language</button>
                </div>
            </div>

        </div>
    </div>
</div>
