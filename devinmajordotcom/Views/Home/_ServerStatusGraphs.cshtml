@model devinmajordotcom.ViewModels.ServerDataViewModel
@{
    var config = Model.LandingPageBannerLinks.FirstOrDefault(x => x.IsEnabled && x.URL == "#server");
}

<div class="inner cover" id="serverGraphs">

    @if (config != null)
    {
        <h2 class="title"><strong>@config.Description</strong></h2>
        <hr>
        <p style="color: #71cef5;">@config.Directive</p>
        <hr>
    }

    <div class="row">
        <div class="col-sm-12 text-center">
            <button class="btn btn-primary" id="goBackToServer"><span class="glyphicon glyphicon-stats"></span>&nbsp;Hide Graphs</button>
        </div>
    </div>

    <br/>

    <div class="row">
        <div class="col-sm-12 text-center">
            <div id="chartContainer">
                <div style="height: 300px;width: 325px;display: inline-block;float: left;">
                    <canvas id="cpuLoadChart"></canvas>
                </div>
                <div style="height: 300px;width: 325px;display: inline-block;float: left;">
                    <canvas id="ramLoadChart"></canvas>
                </div>
                <div style="height: 300px;width: 325px;display: inline-block;float: left;">
                    <canvas id="cpuTempChart"></canvas>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">

    var firstRun1 = true;
    var labels = [];
    var cpuLoadLineGraph, ramLoadLineGraph, cpuTempLineGraph;

    for (var i = 1; i <= 60; i++) {
        labels.push(i.toString());
    }

    var options = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true,
                    max: 100,
                    min: 0,
                    stepSize: 10,

                }
            }]
        }
    };

    $(document).ready(function () {

        $.connection.hub.stop();
        ConnectToSignalRPerformanceHistoryHub();

    });

    function addData(chart, data) {
        chart.data.datasets[0].data.pop();
        chart.data.datasets[0].data = data;
        chart.update(0);
    }

    function ConnectToSignalRPerformanceHistoryHub() {

        var performanceHistoryHub = $.connection.performanceHistoryHub;

        performanceHistoryHub.client.updatePerformanceHistory = function (cpuList, nextCpuValues, nextRamValues, temps) {

            var counter = 0;

            if (firstRun1) {

                var ctx1 = document.getElementById("cpuLoadChart").getContext("2d");
                var ctx2 = document.getElementById("ramLoadChart").getContext("2d");
                var ctx3 = document.getElementById("cpuTempChart").getContext("2d");

                var green_red_gradient1 = ctx1.createLinearGradient(0, 0, 0, 400);
                green_red_gradient1.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                green_red_gradient1.addColorStop(1, 'rgb(255, 255, 255, 0.5)');

                var green_red_gradient2 = ctx2.createLinearGradient(0, 0, 0, 400);
                green_red_gradient2.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                green_red_gradient2.addColorStop(1, 'rgb(255, 255, 255, 0.5)');

                var green_red_gradient3 = ctx3.createLinearGradient(0, 0, 0, 400);
                green_red_gradient3.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                green_red_gradient3.addColorStop(1, 'rgb(255, 255, 255, 0.5)');

                cpuLoadLineGraph = new Chart(ctx1, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'CPU Usage',
                            data: nextCpuValues,
                            backgroundColor: green_red_gradient1,
                            hoverBackgroundColor: green_red_gradient1,
                            borderColor: green_red_gradient1,
                            borderWidth: 1
                        }]
                    },
                    options: options
                });

                ramLoadLineGraph = new Chart(ctx2, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'RAM Usage',
                            data: nextRamValues,
                            backgroundColor: green_red_gradient2,
                            hoverBackgroundColor: green_red_gradient2,
                            borderColor: green_red_gradient2,
                            borderWidth: 1
                        }]
                    },
                    options: options
                });

                cpuTempLineGraph = new Chart(ctx3, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'CPU Temperature',
                            data: temps,
                            backgroundColor: green_red_gradient3,
                            hoverBackgroundColor: green_red_gradient3,
                            borderColor: green_red_gradient3,
                            borderWidth: 1
                        }]
                    },
                    options: options
                });

                firstRun1 = false;

            }
            else {
                addData(cpuLoadLineGraph, nextCpuValues);
                addData(ramLoadLineGraph, nextRamValues);
                addData(cpuTempLineGraph, temps);

            }

            

            

        };

        $.connection.hub.start().done(function () {
            performanceHistoryHub.server.SendPerformanceHistory();
        }).fail(function (reason) {
            $("#ajaxAlertContainer").bootsnack({
                alertType: 'error',
                message: 'SignalR is not running.'
            });
        });

    }

</script>