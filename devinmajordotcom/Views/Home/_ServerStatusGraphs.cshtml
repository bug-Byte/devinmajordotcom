@model devinmajordotcom.ViewModels.ServerDataViewModel
@{
    var config = Model.LandingPageBannerLinks.FirstOrDefault(x => x.IsEnabled && x.URL == "#server");
}

<div class="inner cover" id="serverGraphs">

    @if (config != null)
    {
        <h2 class="title"><strong>@config.Description</strong></h2>
        <hr>
        <p style="color: #71cef5;">@config.Directive</p>
        <hr>
    }

    <div class="row">
        <div class="col-sm-12 text-center">
            <button class="btn btn-primary" id="goBackToServer"><span class="glyphicon glyphicon-stats"></span>&nbsp;Hide Graphs</button>
        </div>
    </div>

    <br/>

    <div class="row">
        <div class="col-sm-12 text-center">
            <div id="chartContainer"></div>
        </div>
    </div>

</div>

<script type="text/javascript">

    var firstRun1 = true;
    var labels = [];
    var cpuLoadCharts = [];
    var cpuTempCharts = [];
    var ramChart;

    for (var i = 1; i <= 60; i++) {
        labels.push(i.toString());
    }

    function addData(chart, data) {
        chart.data.datasets[0].data.pop();
        chart.data.datasets[0].data = data;
        chart.update(0);
    }

    var options = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true,
                    max: 100,
                    min: 0,
                    stepSize: 10,

                }
            }]
        }
    };

    $(document).ready(function () {
        $.connection.hub.stop();
        ConnectToSignalRPerformanceHistoryHub();
    });

    function ConnectToSignalRPerformanceHistoryHub() {

        var performanceHub = $.connection.performanceHub;

        performanceHub.client.updatePerformanceHistory = function (cpuList, nextCpuValues, nextRamValues, temps) {

            var counter = 0;

            if (firstRun1) {
                debugger;
                for (var e = 0; e < cpuList.length; e++) {

                    var loadhtml = '<div style="height: 300px;width: 325px;display: inline-block;float: left;"><canvas id="cpuLoadChart_' + e + '"></canvas></div>';
                    var temphtml = '<div style="height: 300px;width: 325px;display: inline-block;float: left;"><canvas id="cpuTempChart_' + e + '"></canvas></div>';
                    $("#chartContainer").append(loadhtml);
                    $("#chartContainer").append(temphtml);
                    var ctxLoad = document.getElementById("cpuLoadChart_" + e.toString()).getContext("2d");
                    var ctxTemp = document.getElementById("cpuTempChart_" + e.toString()).getContext("2d");

                    var loadGradient = ctxLoad.createLinearGradient(0, 0, 0, 400);
                    var tempGradient = ctxTemp.createLinearGradient(0, 0, 0, 400);

                    loadGradient.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                    loadGradient.addColorStop(1, 'rgb(255, 255, 255, 0.5)');
                    tempGradient.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                    tempGradient.addColorStop(1, 'rgb(255, 255, 255, 0.5)');

                    var loadgraph = new Chart(ctxLoad, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'CPU Usage: ' + cpuList[e],
                                data: nextCpuValues[e],
                                backgroundColor: loadGradient,
                                hoverBackgroundColor: loadGradient,
                                borderColor: loadGradient,
                                borderWidth: 1
                            }]
                        },
                        options: options
                    });

                    var tempgraph = new Chart(ctxTemp, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'CPU Temp: ' + cpuList[e],
                                data: temps[e],
                                backgroundColor: tempGradient,
                                hoverBackgroundColor: tempGradient,
                                borderColor: tempGradient,
                                borderWidth: 1
                            }]
                        },
                        options: options
                    });

                    cpuLoadCharts.push(loadgraph);
                    cpuTempCharts.push(tempgraph);

                }

                if (nextRamValues != null && nextRamValues.length > 0) {

                    var html = '<div style="height: 300px;width: 325px;display: inline-block;float: left;"><canvas id="ramLoadChart"></canvas></div>';
                    $("#chartContainer").append(html);
                    var ctxRam = document.getElementById("ramLoadChart").getContext("2d");
                    var myRamGradient = ctxRam.createLinearGradient(0, 0, 0, 400);
                    myRamGradient.addColorStop(0, 'rgb(113, 206, 245, 0.5)');
                    myRamGradient.addColorStop(1, 'rgb(255, 255, 255, 0.5)');
                    ramChart = new Chart(ctxRam, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'RAM Usage: ',
                                data: nextRamValues,
                                backgroundColor: myRamGradient,
                                hoverBackgroundColor: myRamGradient,
                                borderColor: myRamGradient,
                                borderWidth: 1
                            }]
                        },
                        options: options
                    });

                }

                firstRun1 = false;

            }
            else {

                if (ramChart != null) {
                    addData(ramChart, nextRamValues);
                }

                for (var x = 0; x < cpuList.length; x++) {
                    addData(cpuLoadCharts[x], nextCpuValues[x]);
                    addData(cpuTempCharts[x], temps[x]);
                }

            }
        };

        $.connection.hub.start().done(function () {
            performanceHub.server.SendPerformanceHistory();
        }).fail(function (reason) {
            $("#ajaxAlertContainer").bootsnack({
                alertType: 'error',
                message: 'SignalR is not running.'
            });
        });

    }

</script>